// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page topics-scripting.html
\title Scripting
\brief Qt's scripting features

Qt has two main ways to help make a scripted application. All of these allow
easy integration of the \l{ECMA-262}{ECMAScript} (more widely known as
JavaScript) language into the application. Depending on how deep the integration
should be, one of these APIs can be used:

\section1 JS API
This is a simple API, but limited to basic functionality. The main classes
are QJSEngine and QJSValue, which can be used to embed pure \l{ECMA-262}{ECMAScript}
functionality like evaluating scripts and calling functions.

\section1 QML
\l{Qt QML}{QML} exposes a modified \l{ECMA-262}{ECMAScript} environment. It is designed to mix well with the JavaScript
 API mentioned earlier. QML may be used without \l{Qt Quick} components, which may be useful for
 server side scripting. With QML it is possible to mix pure \l{ECMA-262}{ECMAScript} and declarative components
 (\l{Use Case - Integrating JavaScript in QML}).

All of these three scripting solutions seamlessly inter-operate with \l{The Meta-Object System}{the Meta-Object System}, which means that all \l{Signals & Slots}{signals and slots} and
\l{The Property System}{properties} of a QObject instance are accessible in an \l{ECMA-262}{ECMAScript} environment.
*/
