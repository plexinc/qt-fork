// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \example stackedbarchart
    \title StackedBarChart Example
    \ingroup qtcharts_examples

    \brief The example shows how to create a simple stacked bar chart.

    The stacked bar chart shows the data in sets as bars stacked on top of each other. The stacking
    is done per category. The example shows how to create a simple stacked bar chart. Stacked bar
    chart shows the data in sets as bars that are stacked on top of each other. The stacking is done
    per category. Creating a stacked bar chart is just like creating a regular \l {BarChart Example}
    {bar chart}, except that for a stacked bar chart, we use the QStackedBarSeries API instead of
    QBarSeries.

    \image examples_stackedbarchart.png

    \include examples-run.qdocinc

    \section1 Creating Stacked Bar Charts

    The barsets are used in same way in all barcharts.
    To illustrate the difference between various barcharts, we use same data in all examples.
    Data, which the barchart visualizes, is defined by the QBarSet instances. Here we create the sets and append data
    to them. The data is appended here with << operator. Alternatively the append method could be used.

    \snippet stackedbarchart/main.cpp 1

    We create the series and append the barsets to it. The series takes ownership of the barsets. The series groups the data from sets to categories.
    The first values of each set are grouped together in the first category, the second values in the second category etc.

    \snippet stackedbarchart/main.cpp 2

    Here we create the chart object and add the series to it. We set the title for the chart with setTitle, and then turn on animations of the series by calling
    setAnimationOptions(QChart::SeriesAnimations).

    \snippet stackedbarchart/main.cpp 3

    To have the categories displayed on an axis, we need to create a
    QBarCategoryAxis first. Here we create a category axis with a list of
    categories and add it to the chart aligned to bottom, acting as the
    x-axis. The chart takes ownership of the axis. For the y-axis we use a
    value axis, aligned to the left-hand side.

    \snippet stackedbarchart/main.cpp 4

    We also want to show the legend. To do so, we get the legend pointer from the chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to Qt::AlignBottom.

    \snippet stackedbarchart/main.cpp 5

    Finally, we add the chart onto a view. We also turn on the antialiasing for the chartView.

    \snippet stackedbarchart/main.cpp 6

    The chart is ready to be shown. We set the chart to be the central widget of the window.
    We also set the size for the chart window and show it.

    \snippet stackedbarchart/main.cpp 7
*/
