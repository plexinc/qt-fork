// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \example geoflickr
    \title GeoFlickr (QML)
    \ingroup qtpositioning-examples

    \brief The GeoFlickr example shows how to use the user's current
           position to fetch local content from a web service.

    This is a small example, illustrating one of the very core parts
    of the \l{Qt Positioning} API: the ability to retrieve and use the
    user's current geographic position.

    Key QML types shown in this example:
    \list
        \li \l {QtPositioning::PositionSource} {PositionSource}
        \li \l [QML] {XmlListModel}
    \endlist

    \image  qml-flickr-1.jpg

    \include examples-run.qdocinc

    \section1 Retrieving the Current Position

    Retrieving the user's current position is achieved using the
    \l PositionSource type. In this example, we instantiate the
    \l PositionSource as part of the \c GeoTab component (the floating "window"
    describing current position and status).

    \snippet geoflickr/flickrmobile/GeoTab.qml possrc

    When the "Locate and update" button is pressed, we first interrogate
    the \l PositionSource to check if it has an available backend for
    positioning data. If it does not, we fall back to using a pre-recorded
    NMEA log for demonstration. We then instruct the \l PositionSource to
    request a location \l {QtPositioning::PositionSource::}{update}.

    \snippet geoflickr/flickrmobile/GeoTab.qml locatebutton-top
    \snippet geoflickr/flickrmobile/GeoTab.qml locatebutton-clicked

    To share the new position data with the rest of the application, we
    use properties that we have created on the \c GeoTab component:

    \snippet geoflickr/flickrmobile/GeoTab.qml props

    \section1 Using the Current Position

    The longitude and latitude values retrieved here are eventually set
    in the properties on the \c RestModel component. The \c RestModel is an
    \l [QML] {XmlListModel}, which retrieves XML data from a URL and creates a
    data model by parsing it.

    In this case, it retrieves data from the Flickr REST API online,
    based on our current position

    \snippet geoflickr/flickrcommon/RestModel.qml restmodel

    This model data is then shown in a variety of \l {Qt Quick} views to
    produce the example application.

*/
